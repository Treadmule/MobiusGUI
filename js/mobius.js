/* configurable parameters */

var defaultCFG_URL = 'syscfg/SYSCFG.TXT'; //this is where I put the default SYSCFG file generated by the latest firmware

/* globals */

var SYSCFG;
var parameters;

$(document).ready(function(){
	$.get(defaultCFG_URL, function(content) {
		/* $("#displayFile").text(content); //debug display content of txt file */

		SYSCFG = content;
		parameters = SYSCFG.match(/[^[]+(?=\])/g); //this generates an array that contains all the values found between brackets []
		/* console.log(SYSCFG); */
		displaySettings();
	});
	
    //drag and drop listeners.
	var dropZone = document.getElementById('drop_area');
	dropZone.addEventListener('dragover', handleDragOver, false);
	dropZone.addEventListener('drop', handleFileSelect, false);

	$('.button').click(applySettings);
    
});

function applySettings() {
	//read value of each input, put it back to the main variable 
	for (var i = 0; i < parameters.length; i++) {

		if ( $('[name='+i+']').is('[type=radio]') ) {
			var newValue = $('[name='+i+']:checked').val();
			// console.log('[name='+i+']='+newValue);
			
			if (i == 1) {
				if ( $('[name='+i+']:checked').val()==4 ){
					newValue = 3;
					fpsValue = 1;
					var nth = 0;
					SYSCFG = SYSCFG.replace(/[^[]+(?=\])/g, function(match) {
						return ++nth == 2+1 ? fpsValue : match;
					});
				}
				if ( $('[name='+i+']:checked').val()<4 ){
					fpsValue = 2;
					var nth = 0;
					SYSCFG = SYSCFG.replace(/[^[]+(?=\])/g, function(match) {
						return ++nth == 2+1 ? fpsValue : match;
					});
					console.log("stavolta passo di qua");
				}
			}

			if (i == 3) {
				if ( $('[name='+i+']:checked').val()==4 ){
					newValue = 3;
					fpsValue = 1;
					var nth = 0;
					SYSCFG = SYSCFG.replace(/[^[]+(?=\])/g, function(match) {
						return ++nth == 4+1 ? fpsValue : match;
					});
				}
				if ( $('[name='+i+']:checked').val()<4 ){
					fpsValue = 2;
					var nth = 0;
					SYSCFG = SYSCFG.replace(/[^[]+(?=\])/g, function(match) {
						return ++nth == 4+1 ? fpsValue : match;
					});
					console.log("stavolta passo di qua");
				}
			}

			var nth = 0;
			SYSCFG = SYSCFG.replace(/[^[]+(?=\])/g, function(match) {
				return ++nth == i+1 ? newValue : match;
			});

		}
		if ($('[name='+i+']').is('[type=number]')) {
			var newValue = $('[name='+i+']').val();
			// console.log('[name='+i+']='+newValue);

			var nth = 0;
			SYSCFG = SYSCFG.replace(/[^[]+(?=\])/g, function(match) {
				return ++nth == i+1 ? newValue : match;
			});
		}
	}

	var video1Flip = parseInt($('[name=video1Flip]:checked').val());
	var video2Flip = parseInt($('[name=video2Flip]:checked').val())*2; //multiply x2 so that it returns either 0 or 2, so the sum of this + video1Flip returns a value [0-3].
	var videosFlip = video1Flip + video2Flip;

	var nth = 0;
	SYSCFG = SYSCFG.replace(/[^[]+(?=\])/g, function(match) {
		return ++nth == 12+1 ? videosFlip : match;
	});

	console.log(SYSCFG);
	//SaveSYSCFG(); //then save the file!
}

function displaySettings(){
	for (var i = 0; i < parameters.length; i++) {
		//i=1 because I skip date/time settings
		// console.log('[name='+i+']='+parameters[i]);
		//check if element exists, if it does, assign it's value.
		if ($('[name='+i+']').length != 0) {
			if ($('[name='+i+']').is('[type=radio]')) 		{$('[name='+i+']')[parameters[i]].checked = true;};
			if ($('[name='+i+']').is('[type=number]')) 	{$('[name='+i+']').val(parameters[i]);}
		};
	}

	if (parameters[1]==3 && parameters[2]==1) {$('[name=1]')[4].checked = true;};
	if (parameters[3]==3 && parameters[4]==1) {$('[name=3]')[4].checked = true;};

	switch (parameters[12]) {
		case "0": //both off
			$('[name=video1Flip]')[0].checked = true;
			$('[name=video2Flip]')[0].checked = true;
		break;

		case "1": //flip video1
			$('[name=video1Flip]')[1].checked = true;
			$('[name=video2Flip]')[0].checked = true;
		break;

		case "2": //flip video2
			$('[name=video1Flip]')[0].checked = true;
			$('[name=video2Flip]')[1].checked = true;
		break;

		case "3": //flip both
			$('[name=video1Flip]')[1].checked = true;
			$('[name=video2Flip]')[1].checked = true;
		break;
	}
}




//Drag and drop file reading... user drops a SYSCFG.TXT on the drop area, and script reads it.
 
function handleFileSelect(evt) {
	evt.stopPropagation();
	evt.preventDefault();
	
	var files = evt.dataTransfer.files; // FileList object.
		
	// files is a FileList of File objects. I'll just take the first file
	
	var file = files[0];
	var reader = new FileReader();	
	
	// If we use onloadend, we need to check the readyState.
	reader.onloadend = function(evt) {
		if (evt.target.readyState == FileReader.DONE) { // DONE == 2
			SYSCFG = evt.target.result;
			parameters = SYSCFG.match(/[^[]+(?=\])/g);
			// console.log(SYSCFG);
			displaySettings();
		}
	};
	
	reader.readAsText(file);
}

function handleDragOver(evt) {
	evt.stopPropagation();
	evt.preventDefault();
	evt.dataTransfer.dropEffect = 'copy'; // Explicitly show this is a copy.
}

function SaveSYSCFG() {
	var blob = new Blob([SYSCFG], {type: "text/plain;charset=utf-8"});
	saveAs(blob, "SYSCFG.TXT");
}