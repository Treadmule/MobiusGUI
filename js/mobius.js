/* configurable parameters */

var defaultCFG_URL = 'syscfg/SYSCFG.TXT'; //this is where I put the default SYSCFG file generated by the latest firmware

/* globals */

var SYSCFG;
var parameters;
var defaultParameters;
var version;
var userLoaded;

$(document).ready(function(){
	$.get(defaultCFG_URL, function(content) {
		/* $("#displayFile").text(content); //debug display content of txt file */
		SYSCFG = content;
		updateParameters();
		defaultParameters = parameters;
		correctFW = version[0];
		displaySettings();
	});
	
    //drag and drop listeners.
	var dropZone = document.getElementById('drop_area');
	dropZone.addEventListener('dragover', handleDragOver, false);
	dropZone.addEventListener('dragleave', handleDragLeave, false);
	dropZone.addEventListener('drop', handleFileSelect, false);

	$('.button').click(applySettings);
});

function handleDragOver(evt) {
	evt.stopPropagation();
	evt.preventDefault();
	evt.dataTransfer.dropEffect = 'copy'; // Explicitly show this is a copy.	

	$('#drop_area').addClass('drag');
}

function handleDragLeave(evt) {
	$('#drop_area').removeClass('drag');
}

function handleFileSelect(evt) {
	evt.stopPropagation();
	evt.preventDefault();
	
	var files = evt.dataTransfer.files; // FileList object.
		
	// files is a FileList of File objects. I'll just take the first file
	
	var file = files[0];
	var reader = new FileReader();	
	
	// If we use onloadend, we need to check the readyState.
	reader.onloadend = function(evt) {
		if (evt.target.readyState == FileReader.DONE) { // DONE == 2
			SYSCFG = evt.target.result;
			updateParameters();
			// console.log(SYSCFG);

			console.log(correctFW);

			if(version[0] != correctFW){
				alert("The file you loaded was not generated by firmware v1.13\nPlease update your camera to v1.13 and try again!");
				parameters = defaultParameters;

				$('#drop_area span').removeClass('green');
				$('#drop_area span').addClass('red');
				$('#drop_area span').text('Wrong firmware version!');
			}

			else {
				$('#drop_area span').removeClass('red');
				$('#drop_area span').addClass('green');
				$('#drop_area span').text('File loaded successfully');
				displaySettings();
				userLoaded = 1;
			}
		}
	};
	
	reader.readAsText(file);
}

function applySettings() {
	//read value of each input, put it back to the main variable

	for (var i = 0; i < parameters.length; i++) {
		var element = $('[name='+i+']');

		if ( element.is('[type=radio]') ) {
			var newValue = $('[name='+i+']:checked').val();
			// console.log('[name='+i+']='+newValue);
			
			if (i == 1 || i == 3) {
				prameterIndex = i+1;
				if ( $('[name='+i+']:checked').val()==4 ){
					newValue = 3;
					fpsValue = 1;
					changeParameter(prameterIndex, fpsValue);
				}
				if ( $('[name='+i+']:checked').val()<4 ){
					fpsValue = 2;
					changeParameter(prameterIndex, fpsValue);
				}
			}
			changeParameter(i, newValue);
		}
		if (element.is('[type=number]')) {
			var newValue = element.val();
			if ( parseInt(element.attr('min')) <= parseInt(newValue) && parseInt(newValue) <= parseInt(element.attr('max')) ){
				changeParameter(i, newValue);
			}
			else {
				element.val(defaultParameters[i]);
				whatswrong = element.closest('div').siblings().text();
				alert("One or more values entered for " + whatswrong + "\nare out of the acceptable range.\nI will replace it with the default value.\n\nThe range is: [" + element.attr('min') + ";" + element.attr('max') + "]");
			}
		}
	}

	var video1Flip = parseInt($('[name=video1Flip]:checked').val());
	var video2Flip = parseInt($('[name=video2Flip]:checked').val())*2; //multiply x2 so that it returns either 0 or 2, so the sum of this + video1Flip returns a value [0-3].
	var videosFlip = video1Flip + video2Flip;

	changeParameter(12, videosFlip);

	// updateDate();

	// console.log(SYSCFG);
	SaveSYSCFG(); //then save the file!
}

function displaySettings(){
	for (var i = 0; i < parameters.length; i++) {
		//i=1 because I skip date/time settings
		checkMinMax(i); //check if the parameter is in its range

		//check if element exists, if it does, assign it's value.
		if ($('[name='+i+']').length != 0) {
			if ($('[name='+i+']').is('[type=radio]')) 	{$('[name='+i+']')[parameters[i]].checked = true;};
			if ($('[name='+i+']').is('[type=number]')) 	{$('[name='+i+']').val(parameters[i]);}
		};
	}

	if (parameters[1]==3 && parameters[2]==1) {$('[name=1]')[4].checked = true;};
	if (parameters[3]==3 && parameters[4]==1) {$('[name=3]')[4].checked = true;};

	switch (parameters[12]) {
		case "0": //both off
			$('[name=video1Flip]')[0].checked = true;
			$('[name=video2Flip]')[0].checked = true;
		break;

		case "1": //flip video1
			$('[name=video1Flip]')[1].checked = true;
			$('[name=video2Flip]')[0].checked = true;
		break;

		case "2": //flip video2
			$('[name=video1Flip]')[0].checked = true;
			$('[name=video2Flip]')[1].checked = true;
		break;

		case "3": //flip both
			$('[name=video1Flip]')[1].checked = true;
			$('[name=video2Flip]')[1].checked = true;
		break;
	}
}

//Drag and drop file reading... user drops a SYSCFG.TXT on the drop area, and script reads it.


function changeParameter(position, text){
	var nth = 0;
	SYSCFG = SYSCFG.replace(/[^[]+(?=\])/g, function(match) {
		nth++;
		if (nth == position+1) {return text}
		else {return match}
	});
}

function SaveSYSCFG() {
	if (userLoaded == 1){
		var blob = new Blob([SYSCFG], {type: "text/plain;charset=utf-8"});
		saveAs(blob, "SYSCFG.TXT");
	}
	else {
		alert("You haven't successfully loaded a SYSCFG.TXT file,\nplease make sure your camera has firmware " + correctFW );
	}
}

function updateParameters() {
	parameters = SYSCFG.match(/[^[]+(?=\])/g);//this generates an array that contains all the values found between brackets []
	version = SYSCFG.match(/v[^{]+(?=\})/g);
	console.log(version[0]);
}

function updateDate() {
	var jsDate = new Date();

    var year = jsDate.getFullYear();
    var month = jsDate.getMonth();
    var day = jsDate.getDate();
    var hours = jsDate.getHours();
    var minutes = jsDate.getMinutes();

    month = month + 1 + "";
    day = day + "";
    hours = hours + "";
    minutes = minutes + "";

    if (month.length == 1){month = "0" + month}
    if (day.length == 1){day = "0" + day}

    if (hours.length == 1){hours = "0" + hours}
    if (minutes.length == 1){minutes = "0" + minutes}

    var mobiusDate = [year, '/', month, '/', day, '-', hours, ':', minutes, ':', '00' ].join("");

	changeParameter(0, mobiusDate);
}

function checkMinMax(i) {
	maxvalue = 10;
	minvalue = 0;

	switch(i) {
		case 2: case 4:
		maxvalue = 2;
		minvalue = 1;
		break;

		case 12:
		maxvalue = 3;
	}

	if ($('[name='+i+']').length != 0){
		if ( $('[name='+i+']').attr('maxval') ){
			maxvalue = $('[name='+i+']').attr('maxval');
			minvalue = $('[name='+i+']').attr('minval');
		}
		else if( $('[name='+i+']').attr('max') ){
			maxvalue = $('[name='+i+']').attr('max');
			minvalue = $('[name='+i+']').attr('min');
		}
		else {
			//if not specified, try to gess it by the number of options with the same name
			maxvalue = $('[name='+i+']').length-1;
			minvalue = 0;
		}
	}

	// console.log("parameter[" + i + "] MIN=" + minvalue + " MAX=" + maxvalue );

	if (parameters[i] > maxvalue || parameters[i] < minvalue) {
		parameters[i] = defaultParameters[i];
		console.log("wrong" + i);
		alert("One or more parameters from your SYSCFG.TXT file are out of their acceptable range.\nI'll use defaults instead.");
	}
}